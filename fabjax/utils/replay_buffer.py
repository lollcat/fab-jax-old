from typing import NamedTuple, Tuple, Iterable, Callable

import jax.lax
import jax.numpy as jnp
import chex

class AISData(NamedTuple):
    """Log weights and samples generated by annealed importance sampling."""
    x: chex.Array
    log_w: chex.Array


class BufferState(NamedTuple):
    data: AISData
    is_full: jnp.bool_
    can_sample: jnp.bool_
    current_index: jnp.int32


class ReplayBuffer:
    def __init__(self, dim: int,
                 max_length: int,
                 min_sample_length: int,
                 ):
        """
        Create replay buffer for batched sampling and adding of data.
        Args:
            dim: dimension of x data
            max_length: maximum length of the buffer
            min_sample_length: minimum length of buffer required for sampling
            device: replay buffer device

        The `max_length` and `min_sample_length` should be sufficiently long to prevent overfitting
        to the replay data. For example, if `min_sample_length` is equal to the
        sampling batch size, then we may overfit to the first batch of data, as we would update
        on it many times during the start of training.
        """
        assert min_sample_length < max_length
        self.dim = dim
        self.max_length = max_length
        self.min_sample_length = min_sample_length

    def init(self, key, initial_sampler):
        """
        key: source of randomness
        initial_sampler: sampler producing x and log_w, used to fill the buffer up to
            the min sample length. The initialised flow + AIS may be used here,
            or we may desire to use AIS with more distributions to give the flow a "good start".
        """
        current_index = 0
        is_full = False  # whether the buffer is full
        can_sample = False  # whether the buffer is full enough to begin sampling
        data = AISData(x=jnp.zeros((self.max_length, self.dim)),
                              log_w=jnp.zeros(self.max_length, ))

        buffer_state = BufferState(data=data, is_full=is_full, can_sample=can_sample,
                                   current_index=current_index)
        while not buffer_state.can_sample:
            # fill buffer up minimum length
            key, subkey = jax.random.split(key)
            x, log_w = initial_sampler(subkey)
            buffer_state = self.add(x, log_w, buffer_state)
        return buffer_state


    def add(self, x: chex.Array, log_w: chex.Array, buffer_state: BufferState) -> BufferState:
        """Add a batch of generated data to the replay buffer"""
        batch_size = x.shape[0]
        indices = (jnp.arange(batch_size) + buffer_state.current_index) % self.max_length
        x = buffer_state.data.x.at[indices].set(x)
        log_w = buffer_state.data.log_w.at[indices].set(log_w)
        new_index = buffer_state.current_index + batch_size
        is_full = jax.lax.select(buffer_state.is_full, buffer_state.is_full,
                                 new_index >= self.max_length)
        can_sample = jax.lax.select(buffer_state.is_full, buffer_state.can_sample,
                                    new_index >= self.min_sample_length)
        current_index = new_index % self.max_length
        state = BufferState(data=AISData(x, log_w),
                            current_index=current_index,
                            is_full=is_full,
                            can_sample=can_sample)
        return state


    def sample(self, buffer_state: BufferState, key: chex.PRNGKey,
               batch_size: int) -> Tuple[chex.Array, chex.Array]:
        """Return a batch of sampled data, if the batch size is specified then the batch will have a
        leading axis of length batch_size, otherwise the default self.batch_size will be used."""
        # if not buffer_state.can_sample:
        #     raise Exception("Buffer must be at minimum length before calling sample")
        max_index = jax.lax.select(buffer_state.is_full,
                                   self.max_length, buffer_state.current_index)
        # mask for which data to sample
        probs = jnp.where(jnp.arange(self.max_length) < max_index, jnp.ones(self.max_length,),
                          jnp.zeros((self.max_length,)))
        indices = jax.random.choice(key, jnp.arange(self.max_length), shape=(batch_size,),
                                    replace=False, p=probs)
        return buffer_state.data.x[indices], buffer_state.data.log_w[indices]


    def sample_n_batches(self, buffer_state: BufferState, key: chex.PRNGKey,
                         batch_size: int, n_batches: int) -> \
            Iterable[Tuple[chex.Array, chex.Array]]:
        """Returns a list of batches."""
        x, log_w = self.sample(buffer_state, key, batch_size*n_batches)
        x_batches = jnp.split(x, n_batches)
        log_w_batches = jnp.split(log_w, n_batches)
        dataset = [(x, log_w) for x, log_w in zip(x_batches, log_w_batches)]
        return dataset



if __name__ == '__main__':
    # to check that the replay buffer runs
    dim = 5
    batch_size = 3
    n_batches_total_length = 2
    length = n_batches_total_length * batch_size
    min_sample_length = int(length * 0.5)
    rng_key = jax.random.PRNGKey(0)
    initial_sampler = lambda _: (jnp.ones((batch_size, dim)), jnp.zeros(batch_size))
    buffer = ReplayBuffer(dim, length, min_sample_length)
    buffer_state = buffer.init(rng_key, initial_sampler)
    n_batches = 3
    for i in range(100):
        buffer_state = buffer.add(jnp.ones((batch_size, dim)), jnp.zeros(batch_size), buffer_state)
        rng_key, subkey = jax.random.split(rng_key)
        batch = buffer.sample(buffer_state, subkey, batch_size)

